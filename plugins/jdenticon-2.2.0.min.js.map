{"version":3,"sources":["jdenticon-2.2.0.js"],"names":["global","factory","jdenticon","module","define","self","jQuery","SvgElement_append","parentNode","name","keyValuePairs","el","document","createElementNS","i","arguments","length","setAttribute","appendChild","SvgElement","element","size","Math","min","Number","getAttribute","_el","firstChild","removeChild","SvgWriter","_s","observer","updateCallback","MutationObserver","observe","mutationObserver","onmutation","mutations","mutationIndex","mutation","addedNodes","addedNodeIndex","addedNode","nodeType","dom","getIdenticonType","icons","querySelectorAll","ICON_SELECTOR","iconIndex","type","target","body","VALUE_ATTRIBUTE","HASH_ATTRIBUTE","parseHex","hash","startPosition","octets","parseInt","substr","svgValue","value","SvgPath","dataString","SvgRenderer","_pathsByColor","_target","CanvasRenderer","ctx","width","canvas","height","save","_ctx","translate","clearRect","Graphics","renderer","_renderer","_transform","Transform","noTransform","colorTheme","hue","config","color","correctedHsl","grayscaleSaturation","grayscaleLightness","colorSaturation","colorLightness","sha1","message","wordsToHexString","words","hashOctets","val","shift","push","toString","join","computeHash","blocks","a","b","c","d","e","w","t","T","f","getBlocks","getWordBlock","startIndex","byteCount","wordIndex","binaryMessage","BLOCK_SIZE_WORDS","percentEncoded","encodeURI","binaryMessageLength","charCodeAt","BLOCK_SIZE_BYTES","lastBlockDataLength","block","MESSAGE_LENGTH_SIZE_BYTES","decToHex","v","hueToRgb","m1","m2","h","configuration","paddingOrLocalConfig","defaultPadding","lightness","configName","defaultRange","range","lightnessConfig","configObject","saturation","backColor","padding","hueFunction","originalHue","hueConfig","parse","Point","x","y","rotation","_x","_y","_size","_rotation","iconGenerator","renderShape","colorIndex","shapes","index","rotationIndex","positions","r","shape","beginShape","availableColors","selectedColorIndexes","graphics","cell","endShape","isDuplicate","values","indexOf","setBackground","outer","center","finish","update","hashOrValue","supportsQuerySelectorAll","elements","iconType","hashUtils","validHash","hasAttribute","ICON_TYPE_SVG","getContext","jdenticonStartup","replaceMode","prototype","fillColor","opacity","append","toFixed","ICON_TYPE_CANVAS","dom_getIdenticonType","tagName","test","g","k","addPolygon","addTriangle","s","addRectangle","inner","m","addCircle","addRhombus","points","point","diameter","counterClockwise","sweepFlag","svgRadius","svgDiameter","match","exec","_path","fillStyle","toCss3","fillRect","beginPath","fill","moveTo","lineTo","closePath","radius","arc","PI","restore","invert","di","transform","transformedPoints","transformPoint","p","splice","hashCandidate","rgb","hexColor","isNaN","hsl","l","partialHex","corrector","correctors","right","bottom","drawIcon","Error","toSvg","writer","version","setTimeout"],"mappings":"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","file":"jdenticon-2.2.0.min.js","sourcesContent":["/**\r\n * Jdenticon 2.2.0\r\n * http://jdenticon.com\r\n *  \r\n * Built: 2019-07-13T13:16:31.615Z\r\n *\r\n * Copyright (c) 2014-2019 Daniel Mester Pirttijärvi\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining \r\n * a copy of this software and associated documentation files (the \r\n * \"Software\"), to deal in the Software without restriction, including \r\n * without limitation the rights to use, copy, modify, merge, publish, \r\n * distribute, sublicense, and/or sell copies of the Software, and to \r\n * permit persons to whom the Software is furnished to do so, subject to \r\n * the following conditions:\r\n * \r\n * The above copyright notice and this permission notice shall be \r\n * included in all copies or substantial portions of the Software.\r\n * \r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, \r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF \r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. \r\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY \r\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, \r\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE \r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\n/*jslint bitwise: true */\r\n\r\n(function (global, factory) {\r\n    var jQuery = global && global[\"jQuery\"],\r\n        jdenticon = factory(global, jQuery);\r\n\r\n    // Node.js\r\n    if (typeof module !== \"undefined\" && \"exports\" in module) {\r\n        module[\"exports\"] = jdenticon;\r\n    }\r\n    // RequireJS\r\n    else if (typeof define === \"function\" && define[\"amd\"]) {\r\n        define([], function () { return jdenticon; });\r\n    }\r\n    // No module loader\r\n    else {\r\n        global[\"jdenticon\"] = jdenticon;\r\n    }\r\n})(typeof self !== \"undefined\" ? self : this, function (global, jQuery) {\r\n    \"use strict\";\r\nvar pack = {\"name\":\"jdenticon\",\"version\":\"2.2.0\"};\n\n/**\r\n * Creates a new element and adds it to the specified parent.\r\n * @param {Element} parentNode\r\n * @param {string} name\r\n * @param {...*} keyValuePairs\r\n */\r\nfunction SvgElement_append(parentNode, name, keyValuePairs) {\r\n    var el = document.createElementNS(\"http://www.w3.org/2000/svg\", name);\r\n    \r\n    for (var i = 2; i + 1 < arguments.length; i += 2) {\r\n        el.setAttribute(arguments[i], arguments[i + 1]);\r\n    }\r\n\r\n    parentNode.appendChild(el);\r\n}\r\n\r\n/**\r\n * Renderer producing SVG output.\r\n * @private\r\n * @constructor\r\n */\r\nfunction SvgElement(element) {\r\n    // Don't use the clientWidth and clientHeight properties on SVG elements\r\n    // since Firefox won't serve a proper value of these properties on SVG\r\n    // elements (https://bugzilla.mozilla.org/show_bug.cgi?id=874811)\r\n    // Instead use 100px as a hardcoded size (the svg viewBox will rescale \r\n    // the icon to the correct dimensions)\r\n    this.size = Math.min(\r\n        (Number(element.getAttribute(\"width\")) || 100),\r\n        (Number(element.getAttribute(\"height\")) || 100)\r\n        );\r\n    this._el = element;\r\n    \r\n    // Clear current SVG child elements\r\n    while (element.firstChild) {\r\n        element.removeChild(element.firstChild);\r\n    }\r\n    \r\n    // Set viewBox attribute to ensure the svg scales nicely.\r\n    element.setAttribute(\"viewBox\", \"0 0 \" + this.size + \" \" + this.size);\r\n    element.setAttribute(\"preserveAspectRatio\", \"xMidYMid meet\");\r\n}\r\nSvgElement.prototype = {\r\n    /**\r\n     * Fills the background with the specified color.\r\n     * @param {string} fillColor  Fill color on the format #rrggbb.\r\n     * @param {number} opacity  Opacity in the range [0.0, 1.0].\r\n     */\r\n    setBackground: function (fillColor, opacity) {\r\n        if (opacity) {\r\n            SvgElement_append(this._el, \"rect\",\r\n                \"width\", \"100%\",\r\n                \"height\", \"100%\",\r\n                \"fill\", fillColor,\r\n                \"opacity\", opacity);\r\n        }\r\n    },\r\n    /**\r\n     * Appends a path to the SVG element.\r\n     * @param {string} color Fill color on format #xxxxxx.\r\n     * @param {string} dataString The SVG path data string.\r\n     */\r\n    append: function (color, dataString) {\r\n        SvgElement_append(this._el, \"path\",\r\n            \"fill\", color,\r\n            \"d\", dataString);\r\n    }\r\n};\n\n/**\r\n * Renderer producing SVG output.\r\n * @private\r\n * @constructor\r\n */\r\nfunction SvgWriter(size) {\r\n    this.size = size;\r\n    this._s =\r\n        '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + \r\n        size + '\" height=\"' + size + '\" viewBox=\"0 0 ' + \r\n        size + ' ' + size + '\" preserveAspectRatio=\"xMidYMid meet\">';\r\n}\r\nSvgWriter.prototype = {\r\n    /**\r\n     * Fills the background with the specified color.\r\n     * @param {string} fillColor  Fill color on the format #rrggbb.\r\n     * @param {number} opacity  Opacity in the range [0.0, 1.0].\r\n     */\r\n    setBackground: function (fillColor, opacity) {\r\n        if (opacity) {\r\n            this._s += '<rect width=\"100%\" height=\"100%\" fill=\"' + \r\n                fillColor + '\" opacity=\"' + opacity.toFixed(2) + '\"/>';\r\n        }\r\n    },\r\n    /**\r\n     * Writes a path to the SVG string.\r\n     * @param {string} color Fill color on format #rrggbb.\r\n     * @param {string} dataString The SVG path data string.\r\n     */\r\n    append: function (color, dataString) {\r\n        this._s += \r\n            '<path fill=\"' + color + '\" d=\"' + dataString + '\"/>';\r\n    },\r\n    /**\r\n     * Gets the rendered image as an SVG string.\r\n     */\r\n    toString: function () {\r\n        return this._s + \"</svg>\";\r\n    }\r\n};\n\nvar dom = {\r\n    /** @const */\r\n    ICON_TYPE_SVG: 1,\r\n\r\n    /** @const */\r\n    ICON_TYPE_CANVAS: 2,\r\n    \r\n    /** @const */\r\n    HASH_ATTRIBUTE: \"data-jdenticon-hash\",\r\n    \r\n    /** @const */\r\n    VALUE_ATTRIBUTE: \"data-jdenticon-value\",\r\n\r\n    supportsQuerySelectorAll: typeof document !== \"undefined\" && \"querySelectorAll\" in document,\r\n\r\n    getIdenticonType: dom_getIdenticonType\r\n};\r\n\r\n/** @const */\r\ndom.ICON_SELECTOR = \"[\" + dom.HASH_ATTRIBUTE +\"],[\" + dom.VALUE_ATTRIBUTE +\"]\";\r\n\r\nfunction dom_getIdenticonType(el) {\r\n    if (el) {\r\n        var tagName = el[\"tagName\"];\r\n\r\n        if (/svg/i.test(tagName)) {\r\n            return dom.ICON_TYPE_SVG;\r\n        }\r\n\r\n        if (/canvas/i.test(tagName) && \"getContext\" in el) {\r\n            return dom.ICON_TYPE_CANVAS;\r\n        }\r\n    }\r\n}\n\nfunction observer(updateCallback) {\r\n    if (typeof MutationObserver != \"undefined\") {\r\n        var mutationObserver = new MutationObserver(function onmutation(mutations) {\r\n            for (var mutationIndex = 0; mutationIndex < mutations.length; mutationIndex++) {\r\n                var mutation = mutations[mutationIndex];\r\n                var addedNodes = mutation.addedNodes;\r\n        \r\n                for (var addedNodeIndex = 0; addedNodes && addedNodeIndex < addedNodes.length; addedNodeIndex++) {\r\n                    var addedNode = addedNodes[addedNodeIndex];\r\n        \r\n                    // Skip other types of nodes than element nodes, since they might not support\r\n                    // the querySelectorAll method => runtime error.\r\n                    if (addedNode.nodeType == Node.ELEMENT_NODE) {\r\n                        if (dom.getIdenticonType(addedNode)) {\r\n                            updateCallback(addedNode);\r\n                        }\r\n                        else {\r\n                            var icons = addedNode.querySelectorAll(dom.ICON_SELECTOR);\r\n                            for (var iconIndex = 0; iconIndex < icons.length; iconIndex++) {\r\n                                updateCallback(icons[iconIndex]);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                \r\n                if (mutation.type == \"attributes\" && dom.getIdenticonType(mutation.target)) {\r\n                    updateCallback(mutation.target);\r\n                }\r\n            }\r\n        });\r\n\r\n        mutationObserver.observe(document.body, { \r\n            \"childList\": true, \r\n            \"attributes\": true, \r\n            \"attributeFilter\": [dom.VALUE_ATTRIBUTE, dom.HASH_ATTRIBUTE, \"width\", \"height\"], \r\n            \"subtree\": true \r\n        });\r\n    }\r\n}\n\nvar shapes = {\r\n    center: [\r\n        /** @param {Graphics} g */\r\n        function (g, cell, index) {\r\n            var k = cell * 0.42;\r\n            g.addPolygon([\r\n                0, 0,\r\n                cell, 0,\r\n                cell, cell - k * 2,\r\n                cell - k, cell,\r\n                0, cell\r\n            ]);\r\n        },\r\n        /** @param {Graphics} g */\r\n        function (g, cell, index) {\r\n            var w = 0 | (cell * 0.5), \r\n                h = 0 | (cell * 0.8);\r\n            g.addTriangle(cell - w, 0, w, h, 2);\r\n        },\r\n        /** @param {Graphics} g */\r\n        function (g, cell, index) { \r\n            var s = 0 | (cell / 3);\r\n            g.addRectangle(s, s, cell - s, cell - s);\r\n        },\r\n        /** @param {Graphics} g */\r\n        function (g, cell, index) { \r\n            var inner = cell * 0.1,\r\n                // Use fixed outer border widths in small icons to ensure the border is drawn\r\n                outer = \r\n                    cell < 6 ? 1 :\r\n                    cell < 8 ? 2 :\r\n                    (0 | (cell * 0.25));\r\n                \r\n            inner = \r\n                inner > 1 ? (0 | inner) : // large icon => truncate decimals\r\n                inner > 0.5 ? 1 :         // medium size icon => fixed width\r\n                inner;                    // small icon => anti-aliased border\r\n\r\n            g.addRectangle(outer, outer, cell - inner - outer, cell - inner - outer);\r\n        },\r\n        /** @param {Graphics} g */\r\n        function (g, cell, index) { \r\n            var m = 0 | (cell * 0.15),\r\n                s = 0 | (cell * 0.5);\r\n            g.addCircle(cell - s - m, cell - s - m, s);\r\n        },\r\n        /** @param {Graphics} g */\r\n        function (g, cell, index) {\r\n            var inner = cell * 0.1,\r\n                outer = inner * 4;\r\n\r\n            // Align edge to nearest pixel in large icons\r\n            if (outer > 3) {\r\n                outer = 0 | outer;\r\n            }\r\n\r\n            g.addRectangle(0, 0, cell, cell);\r\n            g.addPolygon([\r\n                outer, outer,\r\n                cell - inner, outer,\r\n                outer + (cell - outer - inner) / 2, cell - inner\r\n            ], true);\r\n        },\r\n        /** @param {Graphics} g */\r\n        function (g, cell, index) {\r\n            g.addPolygon([\r\n                0, 0,\r\n                cell, 0,\r\n                cell, cell * 0.7,\r\n                cell * 0.4, cell * 0.4,\r\n                cell * 0.7, cell,\r\n                0, cell\r\n            ]);\r\n        },\r\n        /** @param {Graphics} g */\r\n        function (g, cell, index) {\r\n            g.addTriangle(cell / 2, cell / 2, cell / 2, cell / 2, 3);\r\n        },\r\n        /** @param {Graphics} g */\r\n        function (g, cell, index) {\r\n            g.addRectangle(0, 0, cell, cell / 2);\r\n            g.addRectangle(0, cell / 2, cell / 2, cell / 2);\r\n            g.addTriangle(cell / 2, cell / 2, cell / 2, cell / 2, 1);\r\n        },\r\n        /** @param {Graphics} g */\r\n        function (g, cell, index) {\r\n            var inner = cell * 0.14,\r\n                // Use fixed outer border widths in small icons to ensure the border is drawn\r\n                outer = \r\n                    cell < 4 ? 1 :\r\n                    cell < 6 ? 2 :\r\n                    (0 | (cell * 0.35));\r\n\r\n            inner = \r\n                cell < 8 ? inner : // small icon => anti-aliased border\r\n                (0 | inner);       // large icon => truncate decimals\r\n\r\n            g.addRectangle(0, 0, cell, cell);\r\n            g.addRectangle(outer, outer, cell - outer - inner, cell - outer - inner, true);\r\n        },\r\n        /** @param {Graphics} g */\r\n        function (g, cell, index) {\r\n            var inner = cell * 0.12,\r\n                outer = inner * 3;\r\n\r\n            g.addRectangle(0, 0, cell, cell);\r\n            g.addCircle(outer, outer, cell - inner - outer, true);\r\n        },\r\n        /** @param {Graphics} g */\r\n        function (g, cell, index) {\r\n            g.addTriangle(cell / 2, cell / 2, cell / 2, cell / 2, 3);\r\n        },\r\n        /** @param {Graphics} g */\r\n        function (g, cell, index) {\r\n            var m = cell * 0.25;\r\n            g.addRectangle(0, 0, cell, cell);\r\n            g.addRhombus(m, m, cell - m, cell - m, true);\r\n        },\r\n        /** @param {Graphics} g */\r\n        function (g, cell, index) {\r\n            var m = cell * 0.4, s = cell * 1.2;\r\n            if (!index) {\r\n                g.addCircle(m, m, s);\r\n            }\r\n        }\r\n    ],\r\n    \r\n    outer: [\r\n        /** @param {Graphics} g */\r\n        function (g, cell, index) {\r\n            g.addTriangle(0, 0, cell, cell, 0);\r\n        },\r\n        /** @param {Graphics} g */\r\n        function (g, cell, index) {\r\n            g.addTriangle(0, cell / 2, cell, cell / 2, 0);\r\n        },\r\n        /** @param {Graphics} g */\r\n        function (g, cell, index) {\r\n            g.addRhombus(0, 0, cell, cell);\r\n        },\r\n        /** @param {Graphics} g */\r\n        function (g, cell, index) {\r\n            var m = cell / 6;\r\n            g.addCircle(m, m, cell - 2 * m);\r\n        }\r\n    ]\r\n};\n\n/**\r\n * Parses a substring of the hash as a number.\r\n * @param {number} startPosition \r\n * @param {number=} octets \r\n * @noinline\r\n */\r\nfunction parseHex(hash, startPosition, octets) {\r\n    return parseInt(hash.substr(startPosition, octets), 16);\r\n}\n\n/**\r\n * Prepares a measure to be used as a measure in an SVG path, by\r\n * rounding the measure to a single decimal. This reduces the file\r\n * size of the generated SVG with more than 50% in some cases.\r\n */\r\nfunction svgValue(value) {\r\n    return ((value * 10 + 0.5) | 0) / 10;\r\n}\r\n\r\n/**\r\n * Represents an SVG path element.\r\n * @private\r\n * @constructor\r\n */\r\nfunction SvgPath() {\r\n    /**\r\n     * This property holds the data string (path.d) of the SVG path.\r\n     */\r\n    this.dataString = \"\";\r\n}\r\nSvgPath.prototype = {\r\n    /**\r\n     * Adds a polygon with the current fill color to the SVG path.\r\n     * @param points An array of Point objects.\r\n     */\r\n    addPolygon: function (points) {\r\n        var dataString = \"M\" + svgValue(points[0].x) + \" \" + svgValue(points[0].y);\r\n        for (var i = 1; i < points.length; i++) {\r\n            dataString += \"L\" + svgValue(points[i].x) + \" \" + svgValue(points[i].y);\r\n        }\r\n        this.dataString += dataString + \"Z\";\r\n    },\r\n    /**\r\n     * Adds a circle with the current fill color to the SVG path.\r\n     * @param {Point} point The upper left corner of the circle bounding box.\r\n     * @param {number} diameter The diameter of the circle.\r\n     * @param {boolean} counterClockwise True if the circle is drawn counter-clockwise (will result in a hole if rendered on a clockwise path).\r\n     */\r\n    addCircle: function (point, diameter, counterClockwise) {\r\n        var sweepFlag = counterClockwise ? 0 : 1,\r\n            svgRadius = svgValue(diameter / 2),\r\n            svgDiameter = svgValue(diameter);\r\n            \r\n        this.dataString += \r\n            \"M\" + svgValue(point.x) + \" \" + svgValue(point.y + diameter / 2) +\r\n            \"a\" + svgRadius + \",\" + svgRadius + \" 0 1,\" + sweepFlag + \" \" + svgDiameter + \",0\" + \r\n            \"a\" + svgRadius + \",\" + svgRadius + \" 0 1,\" + sweepFlag + \" \" + (-svgDiameter) + \",0\";\r\n    }\r\n};\n\n/**\r\n * Renderer producing SVG output.\r\n * @private\r\n * @constructor\r\n * @param {SvgElement|SvgWriter} target \r\n */\r\nfunction SvgRenderer(target) {\r\n    this._pathsByColor = { };\r\n    this._target = target;\r\n    this.size = target.size;\r\n}\r\nSvgRenderer.prototype = {\r\n    /**\r\n     * Fills the background with the specified color.\r\n     * @param {string} fillColor  Fill color on the format #rrggbb[aa].\r\n     */\r\n    setBackground: function (fillColor) {\r\n        var match = /^(#......)(..)?/.exec(fillColor),\r\n            opacity = match[2] ? parseHex(match[2], 0) / 255 : 1;\r\n        this._target.setBackground(match[1], opacity);\r\n    },\r\n    /**\r\n     * Marks the beginning of a new shape of the specified color. Should be ended with a call to endShape.\r\n     * @param {string} color Fill color on format #xxxxxx.\r\n     */\r\n    beginShape: function (color) {\r\n        this._path = this._pathsByColor[color] || (this._pathsByColor[color] = new SvgPath());\r\n    },\r\n    /**\r\n     * Marks the end of the currently drawn shape.\r\n     */\r\n    endShape: function () { },\r\n    /**\r\n     * Adds a polygon with the current fill color to the SVG.\r\n     * @param points An array of Point objects.\r\n     */\r\n    addPolygon: function (points) {\r\n        this._path.addPolygon(points);\r\n    },\r\n    /**\r\n     * Adds a circle with the current fill color to the SVG.\r\n     * @param {Point} point The upper left corner of the circle bounding box.\r\n     * @param {number} diameter The diameter of the circle.\r\n     * @param {boolean} counterClockwise True if the circle is drawn counter-clockwise (will result in a hole if rendered on a clockwise path).\r\n     */\r\n    addCircle: function (point, diameter, counterClockwise) {\r\n        this._path.addCircle(point, diameter, counterClockwise);\r\n    },\r\n    /**\r\n     * Called when the icon has been completely drawn.\r\n     */\r\n    finish: function () { \r\n        for (var color in this._pathsByColor) {\r\n            this._target.append(color, this._pathsByColor[color].dataString);\r\n        }\r\n    }\r\n};\n\n/**\r\n * Renderer redirecting drawing commands to a canvas context.\r\n * @param {number=} size\r\n * @private\r\n * @constructor\r\n */\r\nfunction CanvasRenderer(ctx, size) {\r\n    var width = ctx.canvas.width,\r\n        height = ctx.canvas.height;\r\n    \r\n    ctx.save();\r\n    \r\n    this._ctx = ctx;\r\n    \r\n    if (size) {\r\n        this.size = size;\r\n    }\r\n    else {\r\n        this.size = Math.min(width, height);\r\n        \r\n        ctx.translate(\r\n            ((width - this.size) / 2) | 0,\r\n            ((height - this.size) / 2) | 0);\r\n    }\r\n    \r\n    ctx.clearRect(0, 0, this.size, this.size);\r\n}\r\nCanvasRenderer.prototype = {\r\n    /**\r\n     * Fills the background with the specified color.\r\n     * @param {string} fillColor  Fill color on the format #rrggbb[aa].\r\n     */\r\n    setBackground: function (fillColor) {\r\n        var ctx = this._ctx,\r\n            size = this.size;\r\n                \r\n        ctx.fillStyle = color.toCss3(fillColor);\r\n        ctx.fillRect(0, 0, size, size);\r\n    },\r\n    /**\r\n     * Marks the beginning of a new shape of the specified color. Should be ended with a call to endShape.\r\n     * @param {string} fillColor Fill color on format #rrggbb[aa].\r\n     */\r\n    beginShape: function (fillColor) {\r\n        this._ctx.fillStyle = color.toCss3(fillColor);\r\n        this._ctx.beginPath();\r\n    },\r\n    /**\r\n     * Marks the end of the currently drawn shape. This causes the queued paths to be rendered on the canvas.\r\n     */\r\n    endShape: function () {\r\n        this._ctx.fill();\r\n    },\r\n    /**\r\n     * Adds a polygon to the rendering queue.\r\n     * @param points An array of Point objects.\r\n     */\r\n    addPolygon: function (points) {\r\n        var ctx = this._ctx, i;\r\n        ctx.moveTo(points[0].x, points[0].y);\r\n        for (i = 1; i < points.length; i++) {\r\n            ctx.lineTo(points[i].x, points[i].y);\r\n        }\r\n        ctx.closePath();\r\n    },\r\n    /**\r\n     * Adds a circle to the rendering queue.\r\n     * @param {Point} point The upper left corner of the circle bounding box.\r\n     * @param {number} diameter The diameter of the circle.\r\n     * @param {boolean} counterClockwise True if the circle is drawn counter-clockwise (will result in a hole if rendered on a clockwise path).\r\n     */\r\n    addCircle: function (point, diameter, counterClockwise) {\r\n        var ctx = this._ctx,\r\n            radius = diameter / 2;\r\n        ctx.moveTo(point.x + radius, point.y + radius);\r\n        ctx.arc(point.x + radius, point.y + radius, radius, 0, Math.PI * 2, counterClockwise);\r\n        ctx.closePath();\r\n    },\r\n    /**\r\n     * Called when the icon has been completely drawn.\r\n     */\r\n    finish: function () {\r\n        this._ctx.restore();\r\n    }\r\n};\n\n/**\r\n * Provides helper functions for rendering common basic shapes.\r\n * @private\r\n * @constructor\r\n */\r\nfunction Graphics(renderer) {\r\n    this._renderer = renderer;\r\n    this._transform = Transform.noTransform;\r\n}\r\nGraphics.prototype = {\r\n    /**\r\n     * Adds a polygon to the underlying renderer.\r\n     * @param {Array} points The points of the polygon clockwise on the format [ x0, y0, x1, y1, ..., xn, yn ]\r\n     * @param {boolean=} invert Specifies if the polygon will be inverted.\r\n     */\r\n    addPolygon: function (points, invert) {\r\n        var di = invert ? -2 : 2, \r\n            transform = this._transform,\r\n            transformedPoints = [],\r\n            i;\r\n        \r\n        for (i = invert ? points.length - 2 : 0; i < points.length && i >= 0; i += di) {\r\n            transformedPoints.push(transform.transformPoint(points[i], points[i + 1]));\r\n        }\r\n        \r\n        this._renderer.addPolygon(transformedPoints);\r\n    },\r\n    \r\n    /**\r\n     * Adds a polygon to the underlying renderer.\r\n     * Source: http://stackoverflow.com/a/2173084\r\n     * @param {number} x The x-coordinate of the upper left corner of the rectangle holding the entire ellipse.\r\n     * @param {number} y The y-coordinate of the upper left corner of the rectangle holding the entire ellipse.\r\n     * @param {number} size The size of the ellipse.\r\n     * @param {boolean=} invert Specifies if the ellipse will be inverted.\r\n     */\r\n    addCircle: function (x, y, size, invert) {\r\n        var p = this._transform.transformPoint(x, y, size, size);\r\n        this._renderer.addCircle(p, size, invert);\r\n    },\r\n\r\n    /**\r\n     * Adds a rectangle to the underlying renderer.\r\n     * @param {number} x The x-coordinate of the upper left corner of the rectangle.\r\n     * @param {number} y The y-coordinate of the upper left corner of the rectangle.\r\n     * @param {number} w The width of the rectangle.\r\n     * @param {number} h The height of the rectangle.\r\n     * @param {boolean=} invert Specifies if the rectangle will be inverted.\r\n     */\r\n    addRectangle: function (x, y, w, h, invert) {\r\n        this.addPolygon([\r\n            x, y, \r\n            x + w, y,\r\n            x + w, y + h,\r\n            x, y + h\r\n        ], invert);\r\n    },\r\n\r\n    /**\r\n     * Adds a right triangle to the underlying renderer.\r\n     * @param {number} x The x-coordinate of the upper left corner of the rectangle holding the triangle.\r\n     * @param {number} y The y-coordinate of the upper left corner of the rectangle holding the triangle.\r\n     * @param {number} w The width of the triangle.\r\n     * @param {number} h The height of the triangle.\r\n     * @param {number} r The rotation of the triangle (clockwise). 0 = right corner of the triangle in the lower left corner of the bounding rectangle.\r\n     * @param {boolean=} invert Specifies if the triangle will be inverted.\r\n     */\r\n    addTriangle: function (x, y, w, h, r, invert) {\r\n        var points = [\r\n            x + w, y, \r\n            x + w, y + h, \r\n            x, y + h,\r\n            x, y\r\n        ];\r\n        points.splice(((r || 0) % 4) * 2, 2);\r\n        this.addPolygon(points, invert);\r\n    },\r\n\r\n    /**\r\n     * Adds a rhombus to the underlying renderer.\r\n     * @param {number} x The x-coordinate of the upper left corner of the rectangle holding the rhombus.\r\n     * @param {number} y The y-coordinate of the upper left corner of the rectangle holding the rhombus.\r\n     * @param {number} w The width of the rhombus.\r\n     * @param {number} h The height of the rhombus.\r\n     * @param {boolean=} invert Specifies if the rhombus will be inverted.\r\n     */\r\n    addRhombus: function (x, y, w, h, invert) {\r\n        this.addPolygon([\r\n            x + w / 2, y,\r\n            x + w, y + h / 2,\r\n            x + w / 2, y + h,\r\n            x, y + h / 2\r\n        ], invert);\r\n    }\r\n};\n\n/**\r\n * Gets a set of identicon color candidates for a specified hue and config.\r\n */\r\nfunction colorTheme(hue, config) {\r\n    hue = config.hue(hue);\r\n    return [\r\n        // Dark gray\r\n        color.correctedHsl(hue, config.grayscaleSaturation, config.grayscaleLightness(0)),\r\n        // Mid color\r\n        color.correctedHsl(hue, config.colorSaturation, config.colorLightness(0.5)),\r\n        // Light gray\r\n        color.correctedHsl(hue, config.grayscaleSaturation, config.grayscaleLightness(1)),\r\n        // Light color\r\n        color.correctedHsl(hue, config.colorSaturation, config.colorLightness(1)),\r\n        // Dark color\r\n        color.correctedHsl(hue, config.colorSaturation, config.colorLightness(0))\r\n    ];\r\n}\n\n/**\r\n * Computes a SHA1 hash for any value and returns it as a hexadecimal string.\r\n * @param {string} message \r\n */\r\nfunction sha1(message) {\r\n    /**\r\n     * Converts an array of 32-bit unsigned numbers to a hexadecimal string in big endian format.\r\n     * @param {Array<number>} words\r\n     */\r\n    function wordsToHexString(words) {\r\n        var hashOctets = [];\r\n        for (var i = 0; i < words.length; i++) {\r\n            var val = words[i];\r\n           \r\n            for (var shift = 28; shift >= 0; shift -= 4) {\r\n                var octet = (val >>> shift) & 0xf;\r\n                hashOctets.push(octet.toString(16));\r\n            }\r\n        }\r\n\r\n        return hashOctets.join(\"\");\r\n    }\r\n    \r\n    /**\r\n     * Converts the specified message to a sequence of UTF8 encoded and padded 64 byte blocks.\r\n     * @param {string} message  Any value that will be padded to 64 byte blocks.\r\n     */\r\n    function getBlocks(message) {\r\n        var percentEncoded = encodeURI(message),\r\n            binaryMessage = [],\r\n            binaryMessageLength = 0,\r\n            i, b,\r\n\r\n            blocks = [],\r\n\r\n            BLOCK_SIZE_BYTES = 64,\r\n            BLOCK_SIZE_WORDS = BLOCK_SIZE_BYTES >>> 2,\r\n            MESSAGE_LENGTH_SIZE_BYTES = 8;\r\n\r\n        // UTF8 encode message\r\n        for (i = 0; i < percentEncoded.length; i++) {\r\n            if (percentEncoded[i] == \"%\") {\r\n                b = parseHex(percentEncoded, i + 1, 2);\r\n                i += 2;\r\n            }\r\n            else {\r\n                b = percentEncoded.charCodeAt(i);\r\n            }\r\n            binaryMessage[binaryMessageLength++] = b;\r\n        }\r\n\r\n        // Trailing '1' bit\r\n        binaryMessage[binaryMessageLength++] = 0x80;\r\n        \r\n        function getWordBlock(startIndex, byteCount) {\r\n            var words = [];\r\n            var wordIndex = -1;\r\n            \r\n            for (var i = 0; i < byteCount; i++) {\r\n                wordIndex = (i / 4) | 0;\r\n                words[wordIndex] = (words[wordIndex] || 0) +\r\n                    (binaryMessage[startIndex + i] << ((3 - (i & 3)) * 8));\r\n            }\r\n            \r\n            while (++wordIndex < BLOCK_SIZE_WORDS) {\r\n                words[wordIndex] = 0;\r\n            }\r\n\r\n            return words;\r\n        }\r\n\r\n        // Full blocks\r\n        for (i = 0; i + BLOCK_SIZE_BYTES <= binaryMessageLength; i+= BLOCK_SIZE_BYTES) {\r\n            blocks.push(getWordBlock(i, BLOCK_SIZE_BYTES));\r\n        }\r\n\r\n        // Final block(s)\r\n        // Rest of message\r\n        var lastBlockDataLength = binaryMessageLength - i;\r\n        \r\n        var block = getWordBlock(i, lastBlockDataLength);\r\n        \r\n        // If there is no room for the message size in this block, \r\n        // return the block and put the size in the following block.\r\n        if (lastBlockDataLength + MESSAGE_LENGTH_SIZE_BYTES > BLOCK_SIZE_BYTES) {\r\n            // Message size goes in next block\r\n            blocks.push(block);\r\n            block = getWordBlock(0, 0);\r\n        }\r\n\r\n        var messageSizeBits = binaryMessageLength * 8 - 8;\r\n        block[BLOCK_SIZE_WORDS - 1] = messageSizeBits;\r\n        blocks.push(block);\r\n\r\n        return blocks;\r\n    }\r\n\r\n    /**\r\n     * Rotates the value a specified number of bits to the left.\r\n     * @param {number} value  Value to rotate\r\n     * @param {number} shift  Bit count to shift.\r\n     */\r\n    function rotl(value, shift) {\r\n        return (value << shift) | (value >>> (32 - shift));\r\n    }\r\n    \r\n    /**\r\n     * Computes a SHA1 hash for the specified array of 64 byte blocks.\r\n     * @param {Array<Array<number>>} blocks \r\n     */\r\n    function computeHash(blocks) {\r\n        var a = 0x67452301,\r\n            b = 0xefcdab89,\r\n            c = 0x98badcfe,\r\n            d = 0x10325476,\r\n            e = 0xc3d2e1f0,\r\n            hash = [a, b, c, d, e];\r\n\r\n        for (var i = 0; i < blocks.length; i++) {\r\n            var w = blocks[i];\r\n\r\n            for (var t = 16; t < 80; t++) {\r\n                w[t] = rotl(w[t - 3] ^ w[t - 8] ^ w[t - 14] ^ w[t - 16], 1);\r\n            }\r\n\r\n            for (var t = 0; t < 80; t++) {\r\n                var f =\r\n                    // Ch\r\n                    t < 20 ? ((b & c) ^ ((~b) & d)) + 0x5a827999 :\r\n                    \r\n                    // Parity\r\n                    t < 40 ? (b ^ c ^ d) + 0x6ed9eba1 :\r\n                    \r\n                    // Maj\r\n                    t < 60 ? ((b & c) ^ (b & d) ^ (c & d)) + 0x8f1bbcdc :\r\n                    \r\n                    // Parity\r\n                    (b ^ c ^ d) + 0xca62c1d6;\r\n\r\n                var T = rotl(a, 5) + f + e + w[t];\r\n\r\n                e = d;\r\n                d = c;\r\n                c = rotl(b, 30);\r\n                b = a;\r\n                a = T | 0;\r\n            }\r\n\r\n            hash[0] = a = ((hash[0] + a) | 0);\r\n            hash[1] = b = ((hash[1] + b) | 0);\r\n            hash[2] = c = ((hash[2] + c) | 0);\r\n            hash[3] = d = ((hash[3] + d) | 0);\r\n            hash[4] = e = ((hash[4] + e) | 0);\r\n        }\r\n\r\n        return hash;\r\n    }\r\n\r\n    return wordsToHexString(computeHash(getBlocks(message)));\r\n}\n\nvar hashUtils = {\r\n    /**\r\n     * Inputs a value that might be a valid hash string for Jdenticon and returns it \r\n     * if it is determined valid, otherwise a falsy value is returned.\r\n     */\r\n    validHash: function (hashCandidate) {\r\n        return /^[0-9a-f]{11,}$/i.test(hashCandidate) && hashCandidate;\r\n    },\r\n\r\n    /**\r\n     * Computes a hash for the specified value. Currnently SHA1 is used. This function\r\n     * always returns a valid hash.\r\n     */\r\n    computeHash: function (value) {\r\n        return sha1(value == null ? \"\" : \"\" + value);\r\n    }\r\n};\n\nfunction decToHex(v) {\r\n    v |= 0; // Ensure integer value\r\n    return v < 0 ? \"00\" :\r\n        v < 16 ? \"0\" + v.toString(16) :\r\n        v < 256 ? v.toString(16) :\r\n        \"ff\";\r\n}\r\n\r\nfunction hueToRgb(m1, m2, h) {\r\n    h = h < 0 ? h + 6 : h > 6 ? h - 6 : h;\r\n    return decToHex(255 * (\r\n        h < 1 ? m1 + (m2 - m1) * h :\r\n        h < 3 ? m2 :\r\n        h < 4 ? m1 + (m2 - m1) * (4 - h) :\r\n        m1));\r\n}\r\n    \r\n/**\r\n * Functions for converting colors to hex-rgb representations.\r\n * @private\r\n */\r\nvar color = {\r\n    /**\r\n     * @param {number} r Red channel [0, 255]\r\n     * @param {number} g Green channel [0, 255]\r\n     * @param {number} b Blue channel [0, 255]\r\n     */\r\n    rgb: function (r, g, b) {\r\n        return \"#\" + decToHex(r) + decToHex(g) + decToHex(b);\r\n    },\r\n    /**\r\n     * @param {string} color  Color value to parse. Curently hexadecimal strings on the format #rgb[a] and #rrggbb[aa] are supported.\r\n     */\r\n    parse: function (color) {\r\n        if (/^#[0-9a-f]{3,8}$/i.test(color)) {\r\n            if (color.length < 6) {\r\n                var r = color[1],\r\n                    g = color[2],\r\n                    b = color[3],\r\n                    a = color[4] || \"\";\r\n                return \"#\" + r + r + g + g + b + b + a + a;\r\n            }\r\n            if (color.length == 7 || color.length > 8) {\r\n                return color;\r\n            }\r\n        }\r\n    },\r\n    /**\r\n     * @param {string} hexColor  Color on the format \"#RRGGBB\" or \"#RRGGBBAA\"\r\n     */\r\n    toCss3: function (hexColor) {\r\n        var a = parseHex(hexColor, 7, 2);\r\n        if (isNaN(a)) {\r\n            return hexColor;\r\n        }\r\n        var r = parseHex(hexColor, 1, 2),\r\n            g = parseHex(hexColor, 3, 2),\r\n            b = parseHex(hexColor, 5, 2);\r\n        return \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + (a / 255).toFixed(2) + \")\";\r\n    },\r\n    /**\r\n     * @param h Hue [0, 1]\r\n     * @param s Saturation [0, 1]\r\n     * @param l Lightness [0, 1]\r\n     */\r\n    hsl: function (h, s, l) {\r\n        // Based on http://www.w3.org/TR/2011/REC-css3-color-20110607/#hsl-color\r\n        if (s == 0) {\r\n            var partialHex = decToHex(l * 255);\r\n            return \"#\" + partialHex + partialHex + partialHex;\r\n        }\r\n        else {\r\n            var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s,\r\n                m1 = l * 2 - m2;\r\n            return \"#\" +\r\n                hueToRgb(m1, m2, h * 6 + 2) +\r\n                hueToRgb(m1, m2, h * 6) +\r\n                hueToRgb(m1, m2, h * 6 - 2);\r\n        }\r\n    },\r\n    // This function will correct the lightness for the \"dark\" hues\r\n    correctedHsl: function (h, s, l) {\r\n        // The corrector specifies the perceived middle lightnesses for each hue\r\n        var correctors = [ 0.55, 0.5, 0.5, 0.46, 0.6, 0.55, 0.55 ],\r\n            corrector = correctors[(h * 6 + 0.5) | 0];\r\n        \r\n        // Adjust the input lightness relative to the corrector\r\n        l = l < 0.5 ? l * corrector * 2 : corrector + (l - 0.5) * (1 - corrector) * 2;\r\n        \r\n        return color.hsl(h, s, l);\r\n    }\r\n};\n\n/**\r\n * Gets the normalized current Jdenticon color configuration. Missing fields have default values.\r\n * @param {Object} jdenticon - The public Jdenticon API object, on which the public `config` property is set.\r\n * @param {Object} global - The global object, `window` in the browser and `module` on Node, in which the\r\n *    `jdenticon_config` variable can be declared.\r\n * @param {Object|number|undefined} paddingOrLocalConfig - Configuration passed to the called API method. A\r\n *    local configuration overrides the global configuration in it entirety. This parameter can for backward\r\n *    compatbility also contain a padding value. A padding value only overrides the global padding, not the\r\n *    entire global configuration.\r\n * @param {number} defaultPadding - Padding used if no padding is specified in neither the configuration nor\r\n *    explicitly to the API method.\r\n */\r\nfunction configuration(jdenticon, global, paddingOrLocalConfig, defaultPadding) {\r\n    var configObject = \r\n            typeof paddingOrLocalConfig == \"object\" && paddingOrLocalConfig ||\r\n            jdenticon[\"config\"] ||\r\n            global[\"jdenticon_config\"] ||\r\n            { },\r\n\r\n        lightnessConfig = configObject[\"lightness\"] || { },\r\n        \r\n        // In versions < 2.1.0 there was no grayscale saturation -\r\n        // saturation was the color saturation.\r\n        saturation = configObject[\"saturation\"] || { },\r\n        colorSaturation = \"color\" in saturation ? saturation[\"color\"] : saturation,\r\n        grayscaleSaturation = saturation[\"grayscale\"],\r\n\r\n        backColor = configObject[\"backColor\"],\r\n        padding = configObject[\"padding\"];\r\n    \r\n    /**\r\n     * Creates a lightness range.\r\n     */\r\n    function lightness(configName, defaultRange) {\r\n        var range = lightnessConfig[configName];\r\n        \r\n        // Check if the lightness range is an array-like object. This way we ensure the\r\n        // array contain two values at the same time.\r\n        if (!(range && range.length > 1)) {\r\n            range = defaultRange;\r\n        }\r\n\r\n        /**\r\n         * Gets a lightness relative the specified value in the specified lightness range.\r\n         */\r\n        return function (value) {\r\n            value = range[0] + value * (range[1] - range[0]);\r\n            return value < 0 ? 0 : value > 1 ? 1 : value;\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Gets a hue allowed by the configured hue restriction,\r\n     * provided the originally computed hue.\r\n     */\r\n    function hueFunction(originalHue) {\r\n        var hueConfig = configObject[\"hues\"], hue;\r\n        \r\n        // Check if 'hues' is an array-like object. This way we also ensure that\r\n        // the array is not empty, which would mean no hue restriction.\r\n        if (hueConfig && hueConfig.length > 0) {\r\n            // originalHue is in the range [0, 1]\r\n            // Multiply with 0.999 to change the range to [0, 1) and then truncate the index.\r\n            hue = hueConfig[0 | (0.999 * originalHue * hueConfig.length)];\r\n        }\r\n\r\n        return typeof hue == \"number\" ?\r\n            \r\n            // A hue was specified. We need to convert the hue from\r\n            // degrees on any turn - e.g. 746° is a perfectly valid hue -\r\n            // to turns in the range [0, 1).\r\n            ((((hue / 360) % 1) + 1) % 1) :\r\n\r\n            // No hue configured => use original hue\r\n            originalHue;\r\n    }\r\n        \r\n    return {\r\n        hue: hueFunction,\r\n        colorSaturation: typeof colorSaturation == \"number\" ? colorSaturation : 0.5,\r\n        grayscaleSaturation: typeof grayscaleSaturation == \"number\" ? grayscaleSaturation : 0,\r\n        colorLightness: lightness(\"color\", [0.4, 0.8]),\r\n        grayscaleLightness: lightness(\"grayscale\", [0.3, 0.9]),\r\n        backColor: color.parse(backColor),\r\n        padding: \r\n            typeof paddingOrLocalConfig == \"number\" ? paddingOrLocalConfig : \r\n            typeof padding == \"number\" ? padding : \r\n            defaultPadding\r\n    }\r\n}\n\n/**\r\n * Represents a point.\r\n * @private\r\n * @constructor\r\n */\r\nfunction Point(x, y) {\r\n    this.x = x;\r\n    this.y = y;\r\n};\n\n/**\r\n * Translates and rotates a point before being passed on to the canvas context. This was previously done by the canvas context itself, \r\n * but this caused a rendering issue in Chrome on sizes > 256 where the rotation transformation of inverted paths was not done properly.\r\n * @param {number} x The x-coordinate of the upper left corner of the transformed rectangle.\r\n * @param {number} y The y-coordinate of the upper left corner of the transformed rectangle.\r\n * @param {number} size The size of the transformed rectangle.\r\n * @param {number} rotation Rotation specified as 0 = 0 rad, 1 = 0.5π rad, 2 = π rad, 3 = 1.5π rad\r\n * @private\r\n * @constructor\r\n */\r\nfunction Transform(x, y, size, rotation) {\r\n    this._x = x;\r\n    this._y = y;\r\n    this._size = size;\r\n    this._rotation = rotation;\r\n}\r\nTransform.prototype = {\r\n    /**\r\n     * Transforms the specified point based on the translation and rotation specification for this Transform.\r\n     * @param {number} x x-coordinate\r\n     * @param {number} y y-coordinate\r\n     * @param {number=} w The width of the transformed rectangle. If greater than 0, this will ensure the returned point is of the upper left corner of the transformed rectangle.\r\n     * @param {number=} h The height of the transformed rectangle. If greater than 0, this will ensure the returned point is of the upper left corner of the transformed rectangle.\r\n     */\r\n    transformPoint: function (x, y, w, h) {\r\n        var right = this._x + this._size,\r\n            bottom = this._y + this._size;\r\n        return this._rotation === 1 ? new Point(right - y - (h || 0), this._y + x) :\r\n               this._rotation === 2 ? new Point(right - x - (w || 0), bottom - y - (h || 0)) :\r\n               this._rotation === 3 ? new Point(this._x + y, bottom - x - (w || 0)) :\r\n               new Point(this._x + x, this._y + y);\r\n    }\r\n};\r\nTransform.noTransform = new Transform(0, 0, 0, 0);\n\n/**\r\n * Draws an identicon to a specified renderer.\r\n */\r\nfunction iconGenerator(renderer, hash, x, y, size, config) {\r\n    // Set background color\r\n    if (config.backColor) {\r\n        renderer.setBackground(config.backColor);\r\n    }\r\n    \r\n    // Calculate padding and round to nearest integer\r\n    var padding = (0.5 + size * config.padding) | 0;\r\n    size -= padding * 2;\r\n    \r\n    var graphics = new Graphics(renderer);\r\n    \r\n    // Calculate cell size and ensure it is an integer\r\n    var cell = 0 | (size / 4);\r\n    \r\n    // Since the cell size is integer based, the actual icon will be slightly smaller than specified => center icon\r\n    x += 0 | (padding + size / 2 - cell * 2);\r\n    y += 0 | (padding + size / 2 - cell * 2);\r\n\r\n    function renderShape(colorIndex, shapes, index, rotationIndex, positions) {\r\n        var r = rotationIndex ? parseHex(hash, rotationIndex, 1) : 0,\r\n            shape = shapes[parseHex(hash, index, 1) % shapes.length],\r\n            i;\r\n        \r\n        renderer.beginShape(availableColors[selectedColorIndexes[colorIndex]]);\r\n        \r\n        for (i = 0; i < positions.length; i++) {\r\n            graphics._transform = new Transform(x + positions[i][0] * cell, y + positions[i][1] * cell, cell, r++ % 4);\r\n            shape(graphics, cell, i);\r\n        }\r\n        \r\n        renderer.endShape();\r\n    }\r\n\r\n    // AVAILABLE COLORS\r\n    var hue = parseHex(hash, -7) / 0xfffffff,\r\n    \r\n        // Available colors for this icon\r\n        availableColors = colorTheme(hue, config),\r\n\r\n        // The index of the selected colors\r\n        selectedColorIndexes = [],\r\n        index;\r\n\r\n    function isDuplicate(values) {\r\n        if (values.indexOf(index) >= 0) {\r\n            for (var i = 0; i < values.length; i++) {\r\n                if (selectedColorIndexes.indexOf(values[i]) >= 0) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    for (var i = 0; i < 3; i++) {\r\n        index = parseHex(hash, 8 + i, 1) % availableColors.length;\r\n        if (isDuplicate([0, 4]) || // Disallow dark gray and dark color combo\r\n            isDuplicate([2, 3])) { // Disallow light gray and light color combo\r\n            index = 1;\r\n        }\r\n        selectedColorIndexes.push(index);\r\n    }\r\n\r\n    // ACTUAL RENDERING\r\n    // Sides\r\n    renderShape(0, shapes.outer, 2, 3, [[1, 0], [2, 0], [2, 3], [1, 3], [0, 1], [3, 1], [3, 2], [0, 2]]);\r\n    // Corners\r\n    renderShape(1, shapes.outer, 4, 5, [[0, 0], [3, 0], [3, 3], [0, 3]]);\r\n    // Center\r\n    renderShape(2, shapes.center, 1, null, [[1, 1], [2, 1], [2, 2], [1, 2]]);\r\n    \r\n    renderer.finish();\r\n};\n\n\r\n\r\n/**\r\n * Updates the identicon in the specified canvas or svg elements.\r\n * @param {(string|Element)} el - Specifies the container in which the icon is rendered as a DOM element of the type\r\n *    `<svg>` or `<canvas>`, or a CSS selector to such an element.\r\n * @param {*=} hashOrValue - Optional hash or value to be rendered. If not specified, the `data-jdenticon-hash` or\r\n *    `data-jdenticon-value` attribute will be evaluated.\r\n * @param {Object|number=} config - Optional configuration. If specified, this configuration object overrides any\r\n *    global configuration in its entirety. For backward compability a padding value in the range [0.0, 0.5) can be\r\n *    specified in place of a configuration object.\r\n */\r\nfunction update(el, hashOrValue, config) {\r\n    if (typeof el === \"string\") {\r\n        if (dom.supportsQuerySelectorAll) {\r\n            var elements = document.querySelectorAll(el);\r\n            for (var i = 0; i < elements.length; i++) {\r\n                update(elements[i], hashOrValue, config);\r\n            }\r\n        }\r\n        return;\r\n    }\r\n\r\n    var iconType = dom.getIdenticonType(el);\r\n    if (!iconType) {\r\n        return;\r\n    }\r\n    \r\n    // Hash selection. The result from getValidHash or computeHash is \r\n    // accepted as a valid hash.\r\n    var hash = \r\n        // 1. Explicit valid hash\r\n        hashUtils.validHash(hashOrValue) ||\r\n        \r\n        // 2. Explicit value (`!= null` catches both null and undefined)\r\n        hashOrValue != null && hashUtils.computeHash(hashOrValue) ||\r\n        \r\n        // 3. `data-jdenticon-hash` attribute\r\n        hashUtils.validHash(el.getAttribute(dom.HASH_ATTRIBUTE)) ||\r\n        \r\n        // 4. `data-jdenticon-value` attribute. \r\n        // We want to treat an empty attribute as an empty value. \r\n        // Some browsers return empty string even if the attribute \r\n        // is not specified, so use hasAttribute to determine if \r\n        // the attribute is specified.\r\n        el.hasAttribute(dom.VALUE_ATTRIBUTE) && hashUtils.computeHash(el.getAttribute(dom.VALUE_ATTRIBUTE));\r\n    \r\n    if (!hash) {\r\n        // No hash specified. Don't render an icon.\r\n        return;\r\n    }\r\n    \r\n    var renderer = iconType == dom.ICON_TYPE_SVG ? \r\n        new SvgRenderer(new SvgElement(el)) : \r\n        new CanvasRenderer(el.getContext(\"2d\"));\r\n    \r\n    // Draw icon\r\n    iconGenerator(renderer, hash, 0, 0, renderer.size, configuration(jdenticon, global, config, 0.08));\r\n}\r\n\r\n/**\r\n * Draws an identicon to a context.\r\n * @param {CanvasRenderingContext2D} ctx - Canvas context on which the icon will be drawn at location (0, 0).\r\n * @param {*} hashOrValue - A hexadecimal hash string or any value that will be hashed by Jdenticon.\r\n * @param {number} size - Icon size in pixels.\r\n * @param {Object|number=} config - Optional configuration. If specified, this configuration object overrides any\r\n *    global configuration in its entirety. For backward compability a padding value in the range [0.0, 0.5) can be\r\n *    specified in place of a configuration object.\r\n */\r\nfunction drawIcon(ctx, hashOrValue, size, config) {\r\n    if (!ctx) {\r\n        throw new Error(\"No canvas specified.\");\r\n    }\r\n    \r\n    var renderer = new CanvasRenderer(ctx, size);\r\n    iconGenerator(renderer, \r\n        hashUtils.validHash(hashOrValue) || hashUtils.computeHash(hashOrValue), \r\n        0, 0, size, configuration(jdenticon, global, config, 0));\r\n}\r\n\r\n/**\r\n * Draws an identicon as an SVG string.\r\n * @param {*} hashOrValue - A hexadecimal hash string or any value that will be hashed by Jdenticon.\r\n * @param {number} size - Icon size in pixels.\r\n * @param {Object|number=} config - Optional configuration. If specified, this configuration object overrides any\r\n *    global configuration in its entirety. For backward compability a padding value in the range [0.0, 0.5) can be\r\n *    specified in place of a configuration object.\r\n * @returns {string} SVG string\r\n */\r\nfunction toSvg(hashOrValue, size, config) {\r\n    var writer = new SvgWriter(size);\r\n    var renderer = new SvgRenderer(writer);\r\n    iconGenerator(renderer, \r\n        hashUtils.validHash(hashOrValue) || hashUtils.computeHash(hashOrValue),\r\n        0, 0, size, configuration(jdenticon, global, config, 0.08));\r\n    return writer.toString();\r\n}\r\n\r\n/**\r\n * Updates all canvas elements with the `data-jdenticon-hash` or `data-jdenticon-value` attribute.\r\n */\r\nfunction jdenticon() {\r\n    if (dom.supportsQuerySelectorAll) {\r\n        update(dom.ICON_SELECTOR);\r\n    }\r\n}\r\n\r\n/**\r\n * This function is called once upon page load.\r\n */\r\nfunction jdenticonStartup() {\r\n    var replaceMode = (jdenticon[\"config\"] || global[\"jdenticon_config\"] || { })[\"replaceMode\"];\r\n    if (replaceMode != \"never\") {\r\n        jdenticon();\r\n        \r\n        if (replaceMode == \"observe\") {\r\n            observer(update);\r\n        }\r\n    }\r\n}\r\n\r\n// Public API\r\njdenticon[\"drawIcon\"] = drawIcon;\r\njdenticon[\"toSvg\"] = toSvg;\r\njdenticon[\"update\"] = update;\r\njdenticon[\"version\"] = pack.version;\r\n\r\n// Basic jQuery plugin\r\nif (jQuery) {\r\n    /**\r\n     * Renders an indenticon for all matching supported elements.\r\n     * \r\n     * @param {*} hashOrValue - A hexadecimal hash string or any value that will be hashed by Jdenticon. If not \r\n     * specified the `data-jdenticon-hash` and `data-jdenticon-value` attributes of each element will be\r\n     * evaluated.\r\n     * @param {Object|number=} config - Optional configuration. If specified, this configuration object overrides any global\r\n     * configuration in its entirety. For backward compability a padding value in the range [0.0, 0.5) can be\r\n     * specified in place of a configuration object.\r\n     */\r\n    jQuery[\"fn\"][\"jdenticon\"] = function (hashOrValue, config) {\r\n        this[\"each\"](function (index, el) {\r\n            update(el, hashOrValue, config);\r\n        });\r\n        return this;\r\n    };\r\n}\r\n\r\n// Schedule to render all identicons on the page once it has been loaded.\r\nif (typeof setTimeout === \"function\") {\r\n    setTimeout(jdenticonStartup, 0);\r\n}\r\n\r\n    return jdenticon;\r\n});"]}